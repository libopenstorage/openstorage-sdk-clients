# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from openstorage import api_pb2 as api__pb2


class OpenStorageAlertsStub(object):
  """OpenStorageAlerts defines rpc's for alerts.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.EnumerateWithFilters = channel.unary_stream(
        '/openstorage.api.OpenStorageAlerts/EnumerateWithFilters',
        request_serializer=api__pb2.SdkAlertsEnumerateWithFiltersRequest.SerializeToString,
        response_deserializer=api__pb2.SdkAlertsEnumerateWithFiltersResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageAlerts/Delete',
        request_serializer=api__pb2.SdkAlertsDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkAlertsDeleteResponse.FromString,
        )


class OpenStorageAlertsServicer(object):
  """OpenStorageAlerts defines rpc's for alerts.
  """

  def EnumerateWithFilters(self, request, context):
    """Allows querying alerts.

    EnumerateWithFilters allows 3 different types of queries as defined below:

    * Query that takes only resource type as input
    * Query that takes resource type and alert type as input and
    * Query that takes resource id, alert type and resource type as input.

    #### Input
    SdkAlertsEnumerateRequest takes a list of such queries and the returned
    output is a collective ouput from each of these queries. In that sense,
    the filtering of these queries has a behavior of OR operation.
    Each query also has a list of optional options. These options allow
    narrowing down the scope of alerts search. These options have a
    behavior of an AND operation.

    #### Examples
    To search by a resource type in a given time window would require
    initializing SdkAlertsResourceTypeQuery query and pass in
    SdkAlertsTimeSpan option into SdkAlertsQuery struct and finally
    packing any other such queries into SdkAlertsEnumerateRequest object.
    Alternatively, to search by both resource type and alert type, use
    SdkAlertsAlertTypeQuery as query builder.
    Finally to search all alerts of a given resource type and some
    alerts of another resource type but with specific alert type,
    use two queries, first initialized with SdkAlertsResourceTypeQuery
    and second initialized with SdkAlertsAlertTypeQuery and both
    eventually packed as list in SdkAlertsEnumerateRequest.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete alerts

    #### Delete
    Delete allows 3 different types of queries as defined below:

    * Query that takes only resource type as input
    * Query that takes resource type and alert type as input and
    * Query that takes resource id, alert type and resource type as input.

    #### Input
    SdkAlertsDeleteRequest takes a list of such queries and all alerts
    that match at least one of the queries are deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageAlertsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'EnumerateWithFilters': grpc.unary_stream_rpc_method_handler(
          servicer.EnumerateWithFilters,
          request_deserializer=api__pb2.SdkAlertsEnumerateWithFiltersRequest.FromString,
          response_serializer=api__pb2.SdkAlertsEnumerateWithFiltersResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkAlertsDeleteRequest.FromString,
          response_serializer=api__pb2.SdkAlertsDeleteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageAlerts', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageRoleStub(object):
  """OpenStorageRole service provides methods to manage user roles

  ### Custom roles
  The OpenStorage SDK server is equipped to handle customized authorization
  roles. Using this model it allows administrators to customize the permission
  rules of a role to be used by a user.

  Creating a custom role, or an SdkRole, is done by setting up a set of allowed _rules_,
  or SdkRules, directives which are sequentially scanned until a match is found. Rules
  are created using the names of OpenStorage SDK services and APIs as follows:

  The message SdkRules has the following properties:

  * Services: Is the gRPC service name in `OpenStorage<service name>` in lowercase
  * Apis: Is the API name in the service in lowercase

  Please see SdkRule for more information on the format.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageRole/Create',
        request_serializer=api__pb2.SdkRoleCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkRoleCreateResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageRole/Enumerate',
        request_serializer=api__pb2.SdkRoleEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkRoleEnumerateResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageRole/Inspect',
        request_serializer=api__pb2.SdkRoleInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkRoleInspectResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageRole/Delete',
        request_serializer=api__pb2.SdkRoleDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkRoleDeleteResponse.FromString,
        )
    self.Update = channel.unary_unary(
        '/openstorage.api.OpenStorageRole/Update',
        request_serializer=api__pb2.SdkRoleUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkRoleUpdateResponse.FromString,
        )


class OpenStorageRoleServicer(object):
  """OpenStorageRole service provides methods to manage user roles

  ### Custom roles
  The OpenStorage SDK server is equipped to handle customized authorization
  roles. Using this model it allows administrators to customize the permission
  rules of a role to be used by a user.

  Creating a custom role, or an SdkRole, is done by setting up a set of allowed _rules_,
  or SdkRules, directives which are sequentially scanned until a match is found. Rules
  are created using the names of OpenStorage SDK services and APIs as follows:

  The message SdkRules has the following properties:

  * Services: Is the gRPC service name in `OpenStorage<service name>` in lowercase
  * Apis: Is the API name in the service in lowercase

  Please see SdkRule for more information on the format.
  """

  def Create(self, request, context):
    """Create a role for users in the system
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """List all roles
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Get information about a role
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete an existing role
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    """Update an existing role
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageRoleServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkRoleCreateRequest.FromString,
          response_serializer=api__pb2.SdkRoleCreateResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkRoleEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkRoleEnumerateResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkRoleInspectRequest.FromString,
          response_serializer=api__pb2.SdkRoleInspectResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkRoleDeleteRequest.FromString,
          response_serializer=api__pb2.SdkRoleDeleteResponse.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=api__pb2.SdkRoleUpdateRequest.FromString,
          response_serializer=api__pb2.SdkRoleUpdateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageRole', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageIdentityStub(object):
  """OpenStorageIdentity service provides methods to obtain information
  about the cluster
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Capabilities = channel.unary_unary(
        '/openstorage.api.OpenStorageIdentity/Capabilities',
        request_serializer=api__pb2.SdkIdentityCapabilitiesRequest.SerializeToString,
        response_deserializer=api__pb2.SdkIdentityCapabilitiesResponse.FromString,
        )
    self.Version = channel.unary_unary(
        '/openstorage.api.OpenStorageIdentity/Version',
        request_serializer=api__pb2.SdkIdentityVersionRequest.SerializeToString,
        response_deserializer=api__pb2.SdkIdentityVersionResponse.FromString,
        )


class OpenStorageIdentityServicer(object):
  """OpenStorageIdentity service provides methods to obtain information
  about the cluster
  """

  def Capabilities(self, request, context):
    """Capabilities returns the supported services by the cluster.
    This allows SDK implementations to advertise their supported
    services as the API matures. With this information, clients
    can determine supported services from storage clusters at
    different versions.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Version(self, request, context):
    """Version returns version information about the system.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageIdentityServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Capabilities': grpc.unary_unary_rpc_method_handler(
          servicer.Capabilities,
          request_deserializer=api__pb2.SdkIdentityCapabilitiesRequest.FromString,
          response_serializer=api__pb2.SdkIdentityCapabilitiesResponse.SerializeToString,
      ),
      'Version': grpc.unary_unary_rpc_method_handler(
          servicer.Version,
          request_deserializer=api__pb2.SdkIdentityVersionRequest.FromString,
          response_serializer=api__pb2.SdkIdentityVersionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageIdentity', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageClusterStub(object):
  """OpenStorageCluster service provides the methods to manage the cluster
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InspectCurrent = channel.unary_unary(
        '/openstorage.api.OpenStorageCluster/InspectCurrent',
        request_serializer=api__pb2.SdkClusterInspectCurrentRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterInspectCurrentResponse.FromString,
        )


class OpenStorageClusterServicer(object):
  """OpenStorageCluster service provides the methods to manage the cluster
  """

  def InspectCurrent(self, request, context):
    """InspectCurrent returns information about the current cluster
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageClusterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InspectCurrent': grpc.unary_unary_rpc_method_handler(
          servicer.InspectCurrent,
          request_deserializer=api__pb2.SdkClusterInspectCurrentRequest.FromString,
          response_serializer=api__pb2.SdkClusterInspectCurrentResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageCluster', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageClusterPairStub(object):
  """OpenStorageClusterPair service provides the methods to manage a cluster pair
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterPair/Create',
        request_serializer=api__pb2.SdkClusterPairCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterPairCreateResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterPair/Inspect',
        request_serializer=api__pb2.SdkClusterPairInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterPairInspectResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterPair/Enumerate',
        request_serializer=api__pb2.SdkClusterPairEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterPairEnumerateResponse.FromString,
        )
    self.GetToken = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterPair/GetToken',
        request_serializer=api__pb2.SdkClusterPairGetTokenRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterPairGetTokenResponse.FromString,
        )
    self.ResetToken = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterPair/ResetToken',
        request_serializer=api__pb2.SdkClusterPairResetTokenRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterPairResetTokenResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterPair/Delete',
        request_serializer=api__pb2.SdkClusterPairDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterPairDeleteResponse.FromString,
        )


class OpenStorageClusterPairServicer(object):
  """OpenStorageClusterPair service provides the methods to manage a cluster pair
  """

  def Create(self, request, context):
    """Creates Pair with a remote cluster and returns details about the remote cluster

    ##### Example
    {% codetabs name="Golang", type="go" -%}
    id, err := client.Create(context.Background(), &api.SdkClusterPairCreateRequest {
    Request : &api.ClusterPairCreateRequest {
    RemoteClusterIp: "127.0.0.1",
    RemoteClusterPort: 12345,
    RemoteClusterToken: "<Auth-Token>",
    SetDefault: true,
    }
    })
    {%- endcodetabs %}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect information about a cluster pair
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns list of cluster pairs
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetToken(self, request, context):
    """GetToken returns a auth token
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ResetToken(self, request, context):
    """ResetToken returns a auth token
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete a cluster pair
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageClusterPairServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkClusterPairCreateRequest.FromString,
          response_serializer=api__pb2.SdkClusterPairCreateResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkClusterPairInspectRequest.FromString,
          response_serializer=api__pb2.SdkClusterPairInspectResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkClusterPairEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkClusterPairEnumerateResponse.SerializeToString,
      ),
      'GetToken': grpc.unary_unary_rpc_method_handler(
          servicer.GetToken,
          request_deserializer=api__pb2.SdkClusterPairGetTokenRequest.FromString,
          response_serializer=api__pb2.SdkClusterPairGetTokenResponse.SerializeToString,
      ),
      'ResetToken': grpc.unary_unary_rpc_method_handler(
          servicer.ResetToken,
          request_deserializer=api__pb2.SdkClusterPairResetTokenRequest.FromString,
          response_serializer=api__pb2.SdkClusterPairResetTokenResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkClusterPairDeleteRequest.FromString,
          response_serializer=api__pb2.SdkClusterPairDeleteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageClusterPair', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageClusterDomainsStub(object):
  """OpenStorageClusterDomains is a service used to manage cluster domains in an openstorage cluster.
  A single openstorage cluster can stretch across multiple cluster domains. In other words it can
  span across multiple Container Orchestrator clusters. Each node in the cluster is assigned a
  a cluster domain to start with. A cluster domain and in turn the nodes which are a part of it
  are assigned a status indicating whether the cluster domain is actively participating in the
  cluster or whether it is inactive.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterDomains/Enumerate',
        request_serializer=api__pb2.SdkClusterDomainsEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterDomainsEnumerateResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterDomains/Inspect',
        request_serializer=api__pb2.SdkClusterDomainInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterDomainInspectResponse.FromString,
        )
    self.Activate = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterDomains/Activate',
        request_serializer=api__pb2.SdkClusterDomainActivateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterDomainActivateResponse.FromString,
        )
    self.Deactivate = channel.unary_unary(
        '/openstorage.api.OpenStorageClusterDomains/Deactivate',
        request_serializer=api__pb2.SdkClusterDomainDeactivateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterDomainDeactivateResponse.FromString,
        )


class OpenStorageClusterDomainsServicer(object):
  """OpenStorageClusterDomains is a service used to manage cluster domains in an openstorage cluster.
  A single openstorage cluster can stretch across multiple cluster domains. In other words it can
  span across multiple Container Orchestrator clusters. Each node in the cluster is assigned a
  a cluster domain to start with. A cluster domain and in turn the nodes which are a part of it
  are assigned a status indicating whether the cluster domain is actively participating in the
  cluster or whether it is inactive.
  """

  def Enumerate(self, request, context):
    """Enumerate returns names of all the cluster domains in the cluster
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect returns information about a cluster domain and a
    status indicating whether the cluster domain is active
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Activate(self, request, context):
    """Activates a cluster domain in the cluster.
    All the nodes which are part of an active cluster domain
    will participate in cluster quorum calculation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Deactivate(self, request, context):
    """Deactivates a cluster domain in the cluster.
    All the nodes which are part of a deactivated cluster domain.
    will not participate in cluster quorum calculation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageClusterDomainsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkClusterDomainsEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkClusterDomainsEnumerateResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkClusterDomainInspectRequest.FromString,
          response_serializer=api__pb2.SdkClusterDomainInspectResponse.SerializeToString,
      ),
      'Activate': grpc.unary_unary_rpc_method_handler(
          servicer.Activate,
          request_deserializer=api__pb2.SdkClusterDomainActivateRequest.FromString,
          response_serializer=api__pb2.SdkClusterDomainActivateResponse.SerializeToString,
      ),
      'Deactivate': grpc.unary_unary_rpc_method_handler(
          servicer.Deactivate,
          request_deserializer=api__pb2.SdkClusterDomainDeactivateRequest.FromString,
          response_serializer=api__pb2.SdkClusterDomainDeactivateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageClusterDomains', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStoragePoolStub(object):
  """OpenStoragePool is a service used to manage storage pools in the cluster
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Resize = channel.unary_unary(
        '/openstorage.api.OpenStoragePool/Resize',
        request_serializer=api__pb2.SdkStoragePoolResizeRequest.SerializeToString,
        response_deserializer=api__pb2.SdkStoragePoolResizeResponse.FromString,
        )


class OpenStoragePoolServicer(object):
  """OpenStoragePool is a service used to manage storage pools in the cluster
  """

  def Resize(self, request, context):
    """Resize resizes the specified storage pool based on the request parameters
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStoragePoolServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Resize': grpc.unary_unary_rpc_method_handler(
          servicer.Resize,
          request_deserializer=api__pb2.SdkStoragePoolResizeRequest.FromString,
          response_serializer=api__pb2.SdkStoragePoolResizeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStoragePool', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageNodeStub(object):
  """OpenStorageNode is a service used to manage nodes in the cluster
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageNode/Inspect',
        request_serializer=api__pb2.SdkNodeInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkNodeInspectResponse.FromString,
        )
    self.InspectCurrent = channel.unary_unary(
        '/openstorage.api.OpenStorageNode/InspectCurrent',
        request_serializer=api__pb2.SdkNodeInspectCurrentRequest.SerializeToString,
        response_deserializer=api__pb2.SdkNodeInspectCurrentResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageNode/Enumerate',
        request_serializer=api__pb2.SdkNodeEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkNodeEnumerateResponse.FromString,
        )
    self.EnumerateWithFilters = channel.unary_unary(
        '/openstorage.api.OpenStorageNode/EnumerateWithFilters',
        request_serializer=api__pb2.SdkNodeEnumerateWithFiltersRequest.SerializeToString,
        response_deserializer=api__pb2.SdkNodeEnumerateWithFiltersResponse.FromString,
        )


class OpenStorageNodeServicer(object):
  """OpenStorageNode is a service used to manage nodes in the cluster
  """

  def Inspect(self, request, context):
    """Inspect returns information about the specified node
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InspectCurrent(self, request, context):
    """InspectCurrent returns information about the storage node
    where the client is currently connected to.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns the ids of all the nodes in the current cluster
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EnumerateWithFilters(self, request, context):
    """EnumerateWithFilters returns all the nodes in the current cluster
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageNodeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkNodeInspectRequest.FromString,
          response_serializer=api__pb2.SdkNodeInspectResponse.SerializeToString,
      ),
      'InspectCurrent': grpc.unary_unary_rpc_method_handler(
          servicer.InspectCurrent,
          request_deserializer=api__pb2.SdkNodeInspectCurrentRequest.FromString,
          response_serializer=api__pb2.SdkNodeInspectCurrentResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkNodeEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkNodeEnumerateResponse.SerializeToString,
      ),
      'EnumerateWithFilters': grpc.unary_unary_rpc_method_handler(
          servicer.EnumerateWithFilters,
          request_deserializer=api__pb2.SdkNodeEnumerateWithFiltersRequest.FromString,
          response_serializer=api__pb2.SdkNodeEnumerateWithFiltersResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageNode', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageVolumeStub(object):
  """OpenStorageVolume is a service used to manage the volumes of a storage system
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Create',
        request_serializer=api__pb2.SdkVolumeCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeCreateResponse.FromString,
        )
    self.Clone = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Clone',
        request_serializer=api__pb2.SdkVolumeCloneRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeCloneResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Delete',
        request_serializer=api__pb2.SdkVolumeDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeDeleteResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Inspect',
        request_serializer=api__pb2.SdkVolumeInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeInspectResponse.FromString,
        )
    self.InspectWithFilters = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/InspectWithFilters',
        request_serializer=api__pb2.SdkVolumeInspectWithFiltersRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeInspectWithFiltersResponse.FromString,
        )
    self.Update = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Update',
        request_serializer=api__pb2.SdkVolumeUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeUpdateResponse.FromString,
        )
    self.Stats = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Stats',
        request_serializer=api__pb2.SdkVolumeStatsRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeStatsResponse.FromString,
        )
    self.CapacityUsage = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/CapacityUsage',
        request_serializer=api__pb2.SdkVolumeCapacityUsageRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeCapacityUsageResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Enumerate',
        request_serializer=api__pb2.SdkVolumeEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeEnumerateResponse.FromString,
        )
    self.EnumerateWithFilters = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/EnumerateWithFilters',
        request_serializer=api__pb2.SdkVolumeEnumerateWithFiltersRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeEnumerateWithFiltersResponse.FromString,
        )
    self.SnapshotCreate = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotCreate',
        request_serializer=api__pb2.SdkVolumeSnapshotCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotCreateResponse.FromString,
        )
    self.SnapshotRestore = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotRestore',
        request_serializer=api__pb2.SdkVolumeSnapshotRestoreRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotRestoreResponse.FromString,
        )
    self.SnapshotEnumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotEnumerate',
        request_serializer=api__pb2.SdkVolumeSnapshotEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotEnumerateResponse.FromString,
        )
    self.SnapshotEnumerateWithFilters = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotEnumerateWithFilters',
        request_serializer=api__pb2.SdkVolumeSnapshotEnumerateWithFiltersRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotEnumerateWithFiltersResponse.FromString,
        )
    self.SnapshotScheduleUpdate = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotScheduleUpdate',
        request_serializer=api__pb2.SdkVolumeSnapshotScheduleUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotScheduleUpdateResponse.FromString,
        )


class OpenStorageVolumeServicer(object):
  """OpenStorageVolume is a service used to manage the volumes of a storage system
  """

  def Create(self, request, context):
    """Create creates a volume according to the specification provided

    Requires access AccessType.Read when cloning from a parent volume.

    ##### Example
    {% codetabs name="Golang", type="go" -%}
    id, err := client.Create(context.Background(), &api.SdkVolumeCreateRequest{
    Name: "volume-12345-east",
    Spec: &api.VolumeSpec {
    Size: 1234567,
    },
    })
    {%- language name="Python", type="py" -%}
    en_resp = client.Create(api_pb2.SdkVolumeCreateRequest(
    name="volume-12345-east",
    spec=api_pb2.VolumeSpec(size=1234567)))
    {%- endcodetabs %}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Clone(self, request, context):
    """Clone creates a new writable volume cloned from an existing volume

    Requires access AccessType.Read of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete deletes the provided volume

    Requires access AccessType.Admin of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect returns information about a volume

    Requires access AccessType.Read of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InspectWithFilters(self, request, context):
    """Returns information for a list of volumes that match a filter.
    This call is a helper function like calling
    `OpenStorageVolume.EnumerateWithFilters` then having it
    return the contents of each of those volumes
    `OpenStorageVolume.Inspect()`. Take care in using this call
    when requesting large number of volumes because it will
    block until it has all the information requested before
    returning.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    """Update provides a method for manipulating the specification and attributes of a volume.
    Set can be used to resize a volume, update labels, change replica count, and much more.

    Requires access AccessType.Write of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Stats(self, request, context):
    """Stats returns the statistics for the requested volume

    Requires access AccessType.Read of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CapacityUsage(self, request, context):
    """CapacityUsage returns volume/snapshot's capacity usage details

    Requires access AccessType.Read of volume

    ##### Error codes:

    * codes.Aborted : Command was aborted and only total_bytes field is valid
    * code.Unimmplemented : Command is not suported this kernel.Only total_bytes
    field is valid;
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns a list of volume ids
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EnumerateWithFilters(self, request, context):
    """Enumerate returns a list of volume ids that match the labels if any are provided.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotCreate(self, request, context):
    """SnapshotCreate creates a snapshot of a volume. This creates an immutable (read-only),
    point-in-time snapshot of a volume. To create a new writable volume from
    a snapshot, please use OpenStorageVolume.Clone().

    Requires access AccessType.Read of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotRestore(self, request, context):
    """SnapshotRestore restores a volume to a specified snapshot

    Requires access AccessType.Write of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotEnumerate(self, request, context):
    """SnapshotEnumerate returns a list of snapshots for a specific volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotEnumerateWithFilters(self, request, context):
    """SnapshotEnumerate returns a list of snapshots.
    To filter all the snapshots for a specific volume which may no longer exist,
    specifiy a volume id.
    Labels can also be used to filter the snapshot list.
    If neither are provided all snapshots will be returned.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotScheduleUpdate(self, request, context):
    """Sets the snapshot schedules. This information is saved in the VolumeSpec.snapshot_schedule
    as `policy=<name>,...`. This function will overwrite any policy values
    in the volume. To delete the policies in the volume send no policies.

    Requires access AccessType.Write of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageVolumeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkVolumeCreateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeCreateResponse.SerializeToString,
      ),
      'Clone': grpc.unary_unary_rpc_method_handler(
          servicer.Clone,
          request_deserializer=api__pb2.SdkVolumeCloneRequest.FromString,
          response_serializer=api__pb2.SdkVolumeCloneResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkVolumeDeleteRequest.FromString,
          response_serializer=api__pb2.SdkVolumeDeleteResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkVolumeInspectRequest.FromString,
          response_serializer=api__pb2.SdkVolumeInspectResponse.SerializeToString,
      ),
      'InspectWithFilters': grpc.unary_unary_rpc_method_handler(
          servicer.InspectWithFilters,
          request_deserializer=api__pb2.SdkVolumeInspectWithFiltersRequest.FromString,
          response_serializer=api__pb2.SdkVolumeInspectWithFiltersResponse.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=api__pb2.SdkVolumeUpdateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeUpdateResponse.SerializeToString,
      ),
      'Stats': grpc.unary_unary_rpc_method_handler(
          servicer.Stats,
          request_deserializer=api__pb2.SdkVolumeStatsRequest.FromString,
          response_serializer=api__pb2.SdkVolumeStatsResponse.SerializeToString,
      ),
      'CapacityUsage': grpc.unary_unary_rpc_method_handler(
          servicer.CapacityUsage,
          request_deserializer=api__pb2.SdkVolumeCapacityUsageRequest.FromString,
          response_serializer=api__pb2.SdkVolumeCapacityUsageResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkVolumeEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeEnumerateResponse.SerializeToString,
      ),
      'EnumerateWithFilters': grpc.unary_unary_rpc_method_handler(
          servicer.EnumerateWithFilters,
          request_deserializer=api__pb2.SdkVolumeEnumerateWithFiltersRequest.FromString,
          response_serializer=api__pb2.SdkVolumeEnumerateWithFiltersResponse.SerializeToString,
      ),
      'SnapshotCreate': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotCreate,
          request_deserializer=api__pb2.SdkVolumeSnapshotCreateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotCreateResponse.SerializeToString,
      ),
      'SnapshotRestore': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotRestore,
          request_deserializer=api__pb2.SdkVolumeSnapshotRestoreRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotRestoreResponse.SerializeToString,
      ),
      'SnapshotEnumerate': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotEnumerate,
          request_deserializer=api__pb2.SdkVolumeSnapshotEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotEnumerateResponse.SerializeToString,
      ),
      'SnapshotEnumerateWithFilters': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotEnumerateWithFilters,
          request_deserializer=api__pb2.SdkVolumeSnapshotEnumerateWithFiltersRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotEnumerateWithFiltersResponse.SerializeToString,
      ),
      'SnapshotScheduleUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotScheduleUpdate,
          request_deserializer=api__pb2.SdkVolumeSnapshotScheduleUpdateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotScheduleUpdateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageVolume', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageMountAttachStub(object):
  """OpenStorageMountAttach is a service used to manage node access to a volume.
  Note, these APIs are here for testing or diagnostics purposes only. In normal
  operations, the Container Orchestration (CO) system is managing all mount
  and attach calls through the CSI interface. The normal usage is once volumes
  are created, to let the CO manage the node access functions to the volume.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Attach = channel.unary_unary(
        '/openstorage.api.OpenStorageMountAttach/Attach',
        request_serializer=api__pb2.SdkVolumeAttachRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeAttachResponse.FromString,
        )
    self.Detach = channel.unary_unary(
        '/openstorage.api.OpenStorageMountAttach/Detach',
        request_serializer=api__pb2.SdkVolumeDetachRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeDetachResponse.FromString,
        )
    self.Mount = channel.unary_unary(
        '/openstorage.api.OpenStorageMountAttach/Mount',
        request_serializer=api__pb2.SdkVolumeMountRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeMountResponse.FromString,
        )
    self.Unmount = channel.unary_unary(
        '/openstorage.api.OpenStorageMountAttach/Unmount',
        request_serializer=api__pb2.SdkVolumeUnmountRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeUnmountResponse.FromString,
        )


class OpenStorageMountAttachServicer(object):
  """OpenStorageMountAttach is a service used to manage node access to a volume.
  Note, these APIs are here for testing or diagnostics purposes only. In normal
  operations, the Container Orchestration (CO) system is managing all mount
  and attach calls through the CSI interface. The normal usage is once volumes
  are created, to let the CO manage the node access functions to the volume.
  """

  def Attach(self, request, context):
    """Attach attaches device to the host that the client is communicating with.

    Requires access AccessType.Write of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Detach(self, request, context):
    """Detaches a the volume from the host

    Requires access AccessType.Write of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Mount(self, request, context):
    """Mount mounts an attached volume in the host that the client is communicating with

    Requires access AccessType.Write of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unmount(self, request, context):
    """Unmount unmounts a mounted volume in the host that the client is communicating with

    Requires access AccessType.Write of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageMountAttachServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Attach': grpc.unary_unary_rpc_method_handler(
          servicer.Attach,
          request_deserializer=api__pb2.SdkVolumeAttachRequest.FromString,
          response_serializer=api__pb2.SdkVolumeAttachResponse.SerializeToString,
      ),
      'Detach': grpc.unary_unary_rpc_method_handler(
          servicer.Detach,
          request_deserializer=api__pb2.SdkVolumeDetachRequest.FromString,
          response_serializer=api__pb2.SdkVolumeDetachResponse.SerializeToString,
      ),
      'Mount': grpc.unary_unary_rpc_method_handler(
          servicer.Mount,
          request_deserializer=api__pb2.SdkVolumeMountRequest.FromString,
          response_serializer=api__pb2.SdkVolumeMountResponse.SerializeToString,
      ),
      'Unmount': grpc.unary_unary_rpc_method_handler(
          servicer.Unmount,
          request_deserializer=api__pb2.SdkVolumeUnmountRequest.FromString,
          response_serializer=api__pb2.SdkVolumeUnmountResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageMountAttach', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageMigrateStub(object):
  """OpenStorageMigrate is a service used to manage migration of volumes
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Start = channel.unary_unary(
        '/openstorage.api.OpenStorageMigrate/Start',
        request_serializer=api__pb2.SdkCloudMigrateStartRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudMigrateStartResponse.FromString,
        )
    self.Cancel = channel.unary_unary(
        '/openstorage.api.OpenStorageMigrate/Cancel',
        request_serializer=api__pb2.SdkCloudMigrateCancelRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudMigrateCancelResponse.FromString,
        )
    self.Status = channel.unary_unary(
        '/openstorage.api.OpenStorageMigrate/Status',
        request_serializer=api__pb2.SdkCloudMigrateStatusRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudMigrateStatusResponse.FromString,
        )


class OpenStorageMigrateServicer(object):
  """OpenStorageMigrate is a service used to manage migration of volumes
  """

  def Start(self, request, context):
    """Start a migration operation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Cancel(self, request, context):
    """Cancel a migration operation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Status(self, request, context):
    """Inspect the status of migration operation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageMigrateServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Start': grpc.unary_unary_rpc_method_handler(
          servicer.Start,
          request_deserializer=api__pb2.SdkCloudMigrateStartRequest.FromString,
          response_serializer=api__pb2.SdkCloudMigrateStartResponse.SerializeToString,
      ),
      'Cancel': grpc.unary_unary_rpc_method_handler(
          servicer.Cancel,
          request_deserializer=api__pb2.SdkCloudMigrateCancelRequest.FromString,
          response_serializer=api__pb2.SdkCloudMigrateCancelResponse.SerializeToString,
      ),
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=api__pb2.SdkCloudMigrateStatusRequest.FromString,
          response_serializer=api__pb2.SdkCloudMigrateStatusResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageMigrate', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageObjectstoreStub(object):
  """OpenStorageObjectstore is a service used to manage object store services on volumes
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageObjectstore/Inspect',
        request_serializer=api__pb2.SdkObjectstoreInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkObjectstoreInspectResponse.FromString,
        )
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageObjectstore/Create',
        request_serializer=api__pb2.SdkObjectstoreCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkObjectstoreCreateResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageObjectstore/Delete',
        request_serializer=api__pb2.SdkObjectstoreDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkObjectstoreDeleteResponse.FromString,
        )
    self.Update = channel.unary_unary(
        '/openstorage.api.OpenStorageObjectstore/Update',
        request_serializer=api__pb2.SdkObjectstoreUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkObjectstoreUpdateResponse.FromString,
        )


class OpenStorageObjectstoreServicer(object):
  """OpenStorageObjectstore is a service used to manage object store services on volumes
  """

  def Inspect(self, request, context):
    """Inspect returns information about the object store endpoint
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Create(self, request, context):
    """Creates creates an object store endpoint on specified volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete destroys the object store endpoint on the volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    """Updates provided objectstore status.
    This call can be used to stop and start the server while maintaining the same
    object storage id.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageObjectstoreServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkObjectstoreInspectRequest.FromString,
          response_serializer=api__pb2.SdkObjectstoreInspectResponse.SerializeToString,
      ),
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkObjectstoreCreateRequest.FromString,
          response_serializer=api__pb2.SdkObjectstoreCreateResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkObjectstoreDeleteRequest.FromString,
          response_serializer=api__pb2.SdkObjectstoreDeleteResponse.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=api__pb2.SdkObjectstoreUpdateRequest.FromString,
          response_serializer=api__pb2.SdkObjectstoreUpdateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageObjectstore', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageCredentialsStub(object):
  """OpenStorageCredentials is a service used to manage the cloud credentials
  which can then be used by the OpenStorageCloudBackup service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Create',
        request_serializer=api__pb2.SdkCredentialCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialCreateResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Enumerate',
        request_serializer=api__pb2.SdkCredentialEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialEnumerateResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Inspect',
        request_serializer=api__pb2.SdkCredentialInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialInspectResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Delete',
        request_serializer=api__pb2.SdkCredentialDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialDeleteResponse.FromString,
        )
    self.Validate = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Validate',
        request_serializer=api__pb2.SdkCredentialValidateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialValidateResponse.FromString,
        )


class OpenStorageCredentialsServicer(object):
  """OpenStorageCredentials is a service used to manage the cloud credentials
  which can then be used by the OpenStorageCloudBackup service
  """

  def Create(self, request, context):
    """Create is used to submit cloud credentials. It will return an
    id of the credentials once they are verified to work.

    ##### Example
    {% codetabs name="Golang", type="go" -%}
    id, err := client.Create(context.Background(), &api.SdkCredentialCreateRequest{
    Name: "awscred",
    CredentialType: &api.SdkCredentialCreateRequest_AwsCredential{
    AwsCredential: &api.SdkAwsCredentialRequest{
    AccessKey: "dummy-access",
    SecretKey: "dummy-secret",
    Endpoint:  "dummy-endpoint",
    Region:    "dummy-region",
    },
    },
    })
    {%- language name="Python", type="py" -%}
    en_resp = client.Create(api_pb2.SdkCredentialCreateRequest(
    name='awscred',
    aws_credential=api_pb2.SdkAwsCredentialRequest(
    access_key='dummy-access',
    secret_key='dumm-secret',
    endpoint='dummy-endpoint',
    region='dummy-region')))
    {%- endcodetabs %}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns a list of credential ids
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect returns the information about a credential, but does not return the secret key.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete a specified credential
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Validate(self, request, context):
    """Validate is used to validate credentials
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageCredentialsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkCredentialCreateRequest.FromString,
          response_serializer=api__pb2.SdkCredentialCreateResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkCredentialEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkCredentialEnumerateResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkCredentialInspectRequest.FromString,
          response_serializer=api__pb2.SdkCredentialInspectResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkCredentialDeleteRequest.FromString,
          response_serializer=api__pb2.SdkCredentialDeleteResponse.SerializeToString,
      ),
      'Validate': grpc.unary_unary_rpc_method_handler(
          servicer.Validate,
          request_deserializer=api__pb2.SdkCredentialValidateRequest.FromString,
          response_serializer=api__pb2.SdkCredentialValidateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageCredentials', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageSchedulePolicyStub(object):
  """OpenStorageSchedulePolicy service is used to manage the automated
  snapshots for a volume
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Create',
        request_serializer=api__pb2.SdkSchedulePolicyCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyCreateResponse.FromString,
        )
    self.Update = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Update',
        request_serializer=api__pb2.SdkSchedulePolicyUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyUpdateResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Enumerate',
        request_serializer=api__pb2.SdkSchedulePolicyEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyEnumerateResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Inspect',
        request_serializer=api__pb2.SdkSchedulePolicyInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyInspectResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Delete',
        request_serializer=api__pb2.SdkSchedulePolicyDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyDeleteResponse.FromString,
        )


class OpenStorageSchedulePolicyServicer(object):
  """OpenStorageSchedulePolicy service is used to manage the automated
  snapshots for a volume
  """

  def Create(self, request, context):
    """Create creates a new snapshot schedule. They can be setup daily,
    weekly, or monthly.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    """Update a snapshot schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns a list of schedules
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect returns information about a specified schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete removes a snapshot schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageSchedulePolicyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkSchedulePolicyCreateRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyCreateResponse.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=api__pb2.SdkSchedulePolicyUpdateRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyUpdateResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkSchedulePolicyEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyEnumerateResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkSchedulePolicyInspectRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyInspectResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkSchedulePolicyDeleteRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyDeleteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageSchedulePolicy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageCloudBackupStub(object):
  """OpenStorageCloudBackup service manages backing up volumes to a cloud
  location like Amazon, Google, or Azure.

  #### Backup
  To create a backup, you must first call the Create() call for a specified
  volume. To see the status of this request, use Status() which returns
  a map where the keys are the source volume id.

  #### Restore
  To restore, you would pass a `backup_id` of a successful backup.
  `backup_id` can be retreived by calling Enumerate() for a specified volume.
  Pass this `backup_id` and a new volume name to Restore() to start
  restoring a new volume from an existing backup. To see the status of this
  restore, pass volume id returned by Restore() to input to Status()

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Create',
        request_serializer=api__pb2.SdkCloudBackupCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupCreateResponse.FromString,
        )
    self.GroupCreate = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/GroupCreate',
        request_serializer=api__pb2.SdkCloudBackupGroupCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupGroupCreateResponse.FromString,
        )
    self.Restore = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Restore',
        request_serializer=api__pb2.SdkCloudBackupRestoreRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupRestoreResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Delete',
        request_serializer=api__pb2.SdkCloudBackupDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupDeleteResponse.FromString,
        )
    self.DeleteAll = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/DeleteAll',
        request_serializer=api__pb2.SdkCloudBackupDeleteAllRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupDeleteAllResponse.FromString,
        )
    self.EnumerateWithFilters = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/EnumerateWithFilters',
        request_serializer=api__pb2.SdkCloudBackupEnumerateWithFiltersRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupEnumerateWithFiltersResponse.FromString,
        )
    self.Status = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Status',
        request_serializer=api__pb2.SdkCloudBackupStatusRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupStatusResponse.FromString,
        )
    self.Catalog = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Catalog',
        request_serializer=api__pb2.SdkCloudBackupCatalogRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupCatalogResponse.FromString,
        )
    self.History = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/History',
        request_serializer=api__pb2.SdkCloudBackupHistoryRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupHistoryResponse.FromString,
        )
    self.StateChange = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/StateChange',
        request_serializer=api__pb2.SdkCloudBackupStateChangeRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupStateChangeResponse.FromString,
        )
    self.SchedCreate = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/SchedCreate',
        request_serializer=api__pb2.SdkCloudBackupSchedCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupSchedCreateResponse.FromString,
        )
    self.SchedUpdate = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/SchedUpdate',
        request_serializer=api__pb2.SdkCloudBackupSchedUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupSchedUpdateResponse.FromString,
        )
    self.SchedDelete = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/SchedDelete',
        request_serializer=api__pb2.SdkCloudBackupSchedDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupSchedDeleteResponse.FromString,
        )
    self.SchedEnumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/SchedEnumerate',
        request_serializer=api__pb2.SdkCloudBackupSchedEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupSchedEnumerateResponse.FromString,
        )


class OpenStorageCloudBackupServicer(object):
  """OpenStorageCloudBackup service manages backing up volumes to a cloud
  location like Amazon, Google, or Azure.

  #### Backup
  To create a backup, you must first call the Create() call for a specified
  volume. To see the status of this request, use Status() which returns
  a map where the keys are the source volume id.

  #### Restore
  To restore, you would pass a `backup_id` of a successful backup.
  `backup_id` can be retreived by calling Enumerate() for a specified volume.
  Pass this `backup_id` and a new volume name to Restore() to start
  restoring a new volume from an existing backup. To see the status of this
  restore, pass volume id returned by Restore() to input to Status()

  """

  def Create(self, request, context):
    """Creates a backup request for a specified volume. Use
    OpenStorageCloudBackup.Status() to get the current status of the
    backup request.

    Requires access AccessType.Read of volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GroupCreate(self, request, context):
    """Creates a group backup request for a specified group. Use
    OpenStorageCloudBackup.Status() to get the current status of the
    backup request.

    This will only backup volumes which the user has read_access to.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Restore(self, request, context):
    """Restore creates a new volume from a backup id. The newly created volume
    has an ha_level (number of replicas) of only 1. To increase the number of
    replicas, use OpenStorageVolume.Set() to change the ha_level.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Deletes a backup stored in the cloud. If the backup is an incremental
    backup and other backups are dependent on it, it will not be able to be deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteAll(self, request, context):
    """DeleteAll deletes all the backups in the cloud for the specified volume.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EnumerateWithFilters(self, request, context):
    """Return a list of backups for the specified volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Status(self, request, context):
    """Status returns the status of any cloud backups of a volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Catalog(self, request, context):
    """Catalog returns a list of the contents in the backup
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def History(self, request, context):
    """History returns a list of backups for a specified volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StateChange(self, request, context):
    """StateChange can be used to stop, pause, and restart a backup
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SchedCreate(self, request, context):
    """Create cloud backup schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SchedUpdate(self, request, context):
    """Update existing cloud backup schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SchedDelete(self, request, context):
    """Delete cloud backup schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SchedEnumerate(self, request, context):
    """Enumerate cloud backup schedules
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageCloudBackupServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkCloudBackupCreateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupCreateResponse.SerializeToString,
      ),
      'GroupCreate': grpc.unary_unary_rpc_method_handler(
          servicer.GroupCreate,
          request_deserializer=api__pb2.SdkCloudBackupGroupCreateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupGroupCreateResponse.SerializeToString,
      ),
      'Restore': grpc.unary_unary_rpc_method_handler(
          servicer.Restore,
          request_deserializer=api__pb2.SdkCloudBackupRestoreRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupRestoreResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkCloudBackupDeleteRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupDeleteResponse.SerializeToString,
      ),
      'DeleteAll': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteAll,
          request_deserializer=api__pb2.SdkCloudBackupDeleteAllRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupDeleteAllResponse.SerializeToString,
      ),
      'EnumerateWithFilters': grpc.unary_unary_rpc_method_handler(
          servicer.EnumerateWithFilters,
          request_deserializer=api__pb2.SdkCloudBackupEnumerateWithFiltersRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupEnumerateWithFiltersResponse.SerializeToString,
      ),
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=api__pb2.SdkCloudBackupStatusRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupStatusResponse.SerializeToString,
      ),
      'Catalog': grpc.unary_unary_rpc_method_handler(
          servicer.Catalog,
          request_deserializer=api__pb2.SdkCloudBackupCatalogRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupCatalogResponse.SerializeToString,
      ),
      'History': grpc.unary_unary_rpc_method_handler(
          servicer.History,
          request_deserializer=api__pb2.SdkCloudBackupHistoryRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupHistoryResponse.SerializeToString,
      ),
      'StateChange': grpc.unary_unary_rpc_method_handler(
          servicer.StateChange,
          request_deserializer=api__pb2.SdkCloudBackupStateChangeRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupStateChangeResponse.SerializeToString,
      ),
      'SchedCreate': grpc.unary_unary_rpc_method_handler(
          servicer.SchedCreate,
          request_deserializer=api__pb2.SdkCloudBackupSchedCreateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupSchedCreateResponse.SerializeToString,
      ),
      'SchedUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.SchedUpdate,
          request_deserializer=api__pb2.SdkCloudBackupSchedUpdateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupSchedUpdateResponse.SerializeToString,
      ),
      'SchedDelete': grpc.unary_unary_rpc_method_handler(
          servicer.SchedDelete,
          request_deserializer=api__pb2.SdkCloudBackupSchedDeleteRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupSchedDeleteResponse.SerializeToString,
      ),
      'SchedEnumerate': grpc.unary_unary_rpc_method_handler(
          servicer.SchedEnumerate,
          request_deserializer=api__pb2.SdkCloudBackupSchedEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupSchedEnumerateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageCloudBackup', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStoragePolicyStub(object):
  """OpenStoragePolicy service provides methods to manager storage policies.

  Policies can be used to validate/ensure a set of volume configurations to be followed
  while creating volumes.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStoragePolicy/Create',
        request_serializer=api__pb2.SdkOpenStoragePolicyCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkOpenStoragePolicyCreateResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStoragePolicy/Enumerate',
        request_serializer=api__pb2.SdkOpenStoragePolicyEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkOpenStoragePolicyEnumerateResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStoragePolicy/Inspect',
        request_serializer=api__pb2.SdkOpenStoragePolicyInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkOpenStoragePolicyInspectResponse.FromString,
        )
    self.Update = channel.unary_unary(
        '/openstorage.api.OpenStoragePolicy/Update',
        request_serializer=api__pb2.SdkOpenStoragePolicyUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkOpenStoragePolicyUpdateResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStoragePolicy/Delete',
        request_serializer=api__pb2.SdkOpenStoragePolicyDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkOpenStoragePolicyDeleteResponse.FromString,
        )
    self.SetDefault = channel.unary_unary(
        '/openstorage.api.OpenStoragePolicy/SetDefault',
        request_serializer=api__pb2.SdkOpenStoragePolicySetDefaultRequest.SerializeToString,
        response_deserializer=api__pb2.SdkOpenStoragePolicySetDefaultResponse.FromString,
        )
    self.DefaultInspect = channel.unary_unary(
        '/openstorage.api.OpenStoragePolicy/DefaultInspect',
        request_serializer=api__pb2.SdkOpenStoragePolicyDefaultInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkOpenStoragePolicyDefaultInspectResponse.FromString,
        )
    self.Release = channel.unary_unary(
        '/openstorage.api.OpenStoragePolicy/Release',
        request_serializer=api__pb2.SdkOpenStoragePolicyReleaseRequest.SerializeToString,
        response_deserializer=api__pb2.SdkOpenStoragePolicyReleaseResponse.FromString,
        )


class OpenStoragePolicyServicer(object):
  """OpenStoragePolicy service provides methods to manager storage policies.

  Policies can be used to validate/ensure a set of volume configurations to be followed
  while creating volumes.
  """

  def Create(self, request, context):
    """Creates a storage policy
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns a list of storage policies
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect returns information about a specified storage policy
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    """Updates specified storage policy
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Deletes specified storage policy
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetDefault(self, request, context):
    """Set specified storage policy as default policy
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DefaultInspect(self, request, context):
    """DefaultInspect return default storage policy if any, otherwise
    empty response
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Release(self, request, context):
    """Release specified storage policy constraint for volume
    creation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStoragePolicyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkOpenStoragePolicyCreateRequest.FromString,
          response_serializer=api__pb2.SdkOpenStoragePolicyCreateResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkOpenStoragePolicyEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkOpenStoragePolicyEnumerateResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkOpenStoragePolicyInspectRequest.FromString,
          response_serializer=api__pb2.SdkOpenStoragePolicyInspectResponse.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=api__pb2.SdkOpenStoragePolicyUpdateRequest.FromString,
          response_serializer=api__pb2.SdkOpenStoragePolicyUpdateResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkOpenStoragePolicyDeleteRequest.FromString,
          response_serializer=api__pb2.SdkOpenStoragePolicyDeleteResponse.SerializeToString,
      ),
      'SetDefault': grpc.unary_unary_rpc_method_handler(
          servicer.SetDefault,
          request_deserializer=api__pb2.SdkOpenStoragePolicySetDefaultRequest.FromString,
          response_serializer=api__pb2.SdkOpenStoragePolicySetDefaultResponse.SerializeToString,
      ),
      'DefaultInspect': grpc.unary_unary_rpc_method_handler(
          servicer.DefaultInspect,
          request_deserializer=api__pb2.SdkOpenStoragePolicyDefaultInspectRequest.FromString,
          response_serializer=api__pb2.SdkOpenStoragePolicyDefaultInspectResponse.SerializeToString,
      ),
      'Release': grpc.unary_unary_rpc_method_handler(
          servicer.Release,
          request_deserializer=api__pb2.SdkOpenStoragePolicyReleaseRequest.FromString,
          response_serializer=api__pb2.SdkOpenStoragePolicyReleaseResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStoragePolicy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
