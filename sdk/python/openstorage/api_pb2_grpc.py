# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import api_pb2 as api__pb2


class OpenStorageClusterStub(object):
  """OpenStorageCluster service provides the methods to manage the cluster
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InspectCurrent = channel.unary_unary(
        '/openstorage.api.OpenStorageCluster/InspectCurrent',
        request_serializer=api__pb2.SdkClusterInspectCurrentRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterInspectCurrentResponse.FromString,
        )
    self.AlertEnumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageCluster/AlertEnumerate',
        request_serializer=api__pb2.SdkClusterAlertEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterAlertEnumerateResponse.FromString,
        )
    self.AlertClear = channel.unary_unary(
        '/openstorage.api.OpenStorageCluster/AlertClear',
        request_serializer=api__pb2.SdkClusterAlertClearRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterAlertClearResponse.FromString,
        )
    self.AlertDelete = channel.unary_unary(
        '/openstorage.api.OpenStorageCluster/AlertDelete',
        request_serializer=api__pb2.SdkClusterAlertDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkClusterAlertDeleteResponse.FromString,
        )


class OpenStorageClusterServicer(object):
  """OpenStorageCluster service provides the methods to manage the cluster
  """

  def InspectCurrent(self, request, context):
    """InspectCurrent returns information about the current cluster
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AlertEnumerate(self, request, context):
    """AlertEnumerate returns a list of alerts from the storage cluster
    In REST, use the request values as query parameters.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AlertClear(self, request, context):
    """AlertClear clears the alert for a given resource
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AlertDelete(self, request, context):
    """AlertDelete deletes an alert for all resources
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageClusterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InspectCurrent': grpc.unary_unary_rpc_method_handler(
          servicer.InspectCurrent,
          request_deserializer=api__pb2.SdkClusterInspectCurrentRequest.FromString,
          response_serializer=api__pb2.SdkClusterInspectCurrentResponse.SerializeToString,
      ),
      'AlertEnumerate': grpc.unary_unary_rpc_method_handler(
          servicer.AlertEnumerate,
          request_deserializer=api__pb2.SdkClusterAlertEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkClusterAlertEnumerateResponse.SerializeToString,
      ),
      'AlertClear': grpc.unary_unary_rpc_method_handler(
          servicer.AlertClear,
          request_deserializer=api__pb2.SdkClusterAlertClearRequest.FromString,
          response_serializer=api__pb2.SdkClusterAlertClearResponse.SerializeToString,
      ),
      'AlertDelete': grpc.unary_unary_rpc_method_handler(
          servicer.AlertDelete,
          request_deserializer=api__pb2.SdkClusterAlertDeleteRequest.FromString,
          response_serializer=api__pb2.SdkClusterAlertDeleteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageCluster', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageNodeStub(object):
  """OpenStorageNode is a service used to manage nodes in the cluster
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageNode/Inspect',
        request_serializer=api__pb2.SdkNodeInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkNodeInspectResponse.FromString,
        )
    self.InspectCurrent = channel.unary_unary(
        '/openstorage.api.OpenStorageNode/InspectCurrent',
        request_serializer=api__pb2.SdkNodeInspectCurrentRequest.SerializeToString,
        response_deserializer=api__pb2.SdkNodeInspectCurrentResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageNode/Enumerate',
        request_serializer=api__pb2.SdkNodeEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkNodeEnumerateResponse.FromString,
        )


class OpenStorageNodeServicer(object):
  """OpenStorageNode is a service used to manage nodes in the cluster
  """

  def Inspect(self, request, context):
    """Inspect returns information about the specified node
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InspectCurrent(self, request, context):
    """InspectCurrent returns information about the storage node
    where the client is currently connected to.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns the ids of all the nodes in the current cluster
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageNodeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkNodeInspectRequest.FromString,
          response_serializer=api__pb2.SdkNodeInspectResponse.SerializeToString,
      ),
      'InspectCurrent': grpc.unary_unary_rpc_method_handler(
          servicer.InspectCurrent,
          request_deserializer=api__pb2.SdkNodeInspectCurrentRequest.FromString,
          response_serializer=api__pb2.SdkNodeInspectCurrentResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkNodeEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkNodeEnumerateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageNode', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageVolumeStub(object):
  """OpenStorageVolume is a service used to manage the volumes of a storage system
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Create',
        request_serializer=api__pb2.SdkVolumeCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeCreateResponse.FromString,
        )
    self.Clone = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Clone',
        request_serializer=api__pb2.SdkVolumeCloneRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeCloneResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Delete',
        request_serializer=api__pb2.SdkVolumeDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeDeleteResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Inspect',
        request_serializer=api__pb2.SdkVolumeInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeInspectResponse.FromString,
        )
    self.Update = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Update',
        request_serializer=api__pb2.SdkVolumeUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeUpdateResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Enumerate',
        request_serializer=api__pb2.SdkVolumeEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeEnumerateResponse.FromString,
        )
    self.EnumerateWithFilters = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/EnumerateWithFilters',
        request_serializer=api__pb2.SdkVolumeEnumerateWithFiltersRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeEnumerateWithFiltersResponse.FromString,
        )
    self.SnapshotCreate = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotCreate',
        request_serializer=api__pb2.SdkVolumeSnapshotCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotCreateResponse.FromString,
        )
    self.SnapshotRestore = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotRestore',
        request_serializer=api__pb2.SdkVolumeSnapshotRestoreRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotRestoreResponse.FromString,
        )
    self.SnapshotEnumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotEnumerate',
        request_serializer=api__pb2.SdkVolumeSnapshotEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotEnumerateResponse.FromString,
        )
    self.SnapshotEnumerateWithFilters = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/SnapshotEnumerateWithFilters',
        request_serializer=api__pb2.SdkVolumeSnapshotEnumerateWithFiltersRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeSnapshotEnumerateWithFiltersResponse.FromString,
        )
    self.Attach = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Attach',
        request_serializer=api__pb2.SdkVolumeAttachRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeAttachResponse.FromString,
        )
    self.Detach = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Detach',
        request_serializer=api__pb2.SdkVolumeDetachRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeDetachResponse.FromString,
        )
    self.Mount = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Mount',
        request_serializer=api__pb2.SdkVolumeMountRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeMountResponse.FromString,
        )
    self.Unmount = channel.unary_unary(
        '/openstorage.api.OpenStorageVolume/Unmount',
        request_serializer=api__pb2.SdkVolumeUnmountRequest.SerializeToString,
        response_deserializer=api__pb2.SdkVolumeUnmountResponse.FromString,
        )


class OpenStorageVolumeServicer(object):
  """OpenStorageVolume is a service used to manage the volumes of a storage system
  """

  def Create(self, request, context):
    """Create creates a volume according to the specification provided

    ##### Example
    {% codetabs name="Golang", type="go" -%}
    id, err := client.Create(context.Background(), &api.SdkVolumeCreateRequest{
    Name: "volume-12345-east",
    Spec: &api.VolumeSpec {
    Size: 1234567,
    },
    })
    {%- language name="Python", type="py" -%}
    en_resp = client.Create(api_pb2.SdkVolumeCreateRequest(
    name="volume-12345-east",
    spec=api_pb2.VolumeSpec(size=1234567)))
    {%- endcodetabs %}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Clone(self, request, context):
    """Clone creates a new writable volume cloned from an existing volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete deletes the provided volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect returns information about a volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    """Update provides a method for manipulating the specification and attributes of a volume.
    Set can be used to resize a volume, update labels, change replica count, and much more.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns a list of volume ids
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EnumerateWithFilters(self, request, context):
    """Enumerate returns a list of volume ids that match the labels if any are provided.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotCreate(self, request, context):
    """SnapshotCreate creates a snapshot of a volume. This creates an immutable (read-only),
    point-in-time snapshot of a volume. To create a new writable volume from
    a snapshot, please use OpenStorageVolume.Clone().
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotRestore(self, request, context):
    """SnapshotRestore restores a volume to a specified snapshot
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotEnumerate(self, request, context):
    """SnapshotEnumerate returns a list of snapshots for a specific volume
    that match the labels provided if any.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SnapshotEnumerateWithFilters(self, request, context):
    """SnapshotEnumerate returns a list of snapshots for a specific volume
    that match the labels provided if any.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Attach(self, request, context):
    """Attach attaches device to the host that the client is communicating with.
    NOTE: Please see [#381](https://github.com/libopenstorage/openstorage/issues/381) for more
    information about a new feature to allow attachment to any node.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Detach(self, request, context):
    """Detaches a the volume from the host
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Mount(self, request, context):
    """Mount mounts an attached volume in the host that the client is communicating with
    NOTE: Please see [#381](https://github.com/libopenstorage/openstorage/issues/381) for more
    information about a new feature to allow attachment to any node.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unmount(self, request, context):
    """Unmount unmounts a mounted volume in the host that the client is communicating with
    NOTE: Please see [#381](https://github.com/libopenstorage/openstorage/issues/381) for more
    information about a new feature to allow attachment to any node.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageVolumeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkVolumeCreateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeCreateResponse.SerializeToString,
      ),
      'Clone': grpc.unary_unary_rpc_method_handler(
          servicer.Clone,
          request_deserializer=api__pb2.SdkVolumeCloneRequest.FromString,
          response_serializer=api__pb2.SdkVolumeCloneResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkVolumeDeleteRequest.FromString,
          response_serializer=api__pb2.SdkVolumeDeleteResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkVolumeInspectRequest.FromString,
          response_serializer=api__pb2.SdkVolumeInspectResponse.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=api__pb2.SdkVolumeUpdateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeUpdateResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkVolumeEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeEnumerateResponse.SerializeToString,
      ),
      'EnumerateWithFilters': grpc.unary_unary_rpc_method_handler(
          servicer.EnumerateWithFilters,
          request_deserializer=api__pb2.SdkVolumeEnumerateWithFiltersRequest.FromString,
          response_serializer=api__pb2.SdkVolumeEnumerateWithFiltersResponse.SerializeToString,
      ),
      'SnapshotCreate': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotCreate,
          request_deserializer=api__pb2.SdkVolumeSnapshotCreateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotCreateResponse.SerializeToString,
      ),
      'SnapshotRestore': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotRestore,
          request_deserializer=api__pb2.SdkVolumeSnapshotRestoreRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotRestoreResponse.SerializeToString,
      ),
      'SnapshotEnumerate': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotEnumerate,
          request_deserializer=api__pb2.SdkVolumeSnapshotEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotEnumerateResponse.SerializeToString,
      ),
      'SnapshotEnumerateWithFilters': grpc.unary_unary_rpc_method_handler(
          servicer.SnapshotEnumerateWithFilters,
          request_deserializer=api__pb2.SdkVolumeSnapshotEnumerateWithFiltersRequest.FromString,
          response_serializer=api__pb2.SdkVolumeSnapshotEnumerateWithFiltersResponse.SerializeToString,
      ),
      'Attach': grpc.unary_unary_rpc_method_handler(
          servicer.Attach,
          request_deserializer=api__pb2.SdkVolumeAttachRequest.FromString,
          response_serializer=api__pb2.SdkVolumeAttachResponse.SerializeToString,
      ),
      'Detach': grpc.unary_unary_rpc_method_handler(
          servicer.Detach,
          request_deserializer=api__pb2.SdkVolumeDetachRequest.FromString,
          response_serializer=api__pb2.SdkVolumeDetachResponse.SerializeToString,
      ),
      'Mount': grpc.unary_unary_rpc_method_handler(
          servicer.Mount,
          request_deserializer=api__pb2.SdkVolumeMountRequest.FromString,
          response_serializer=api__pb2.SdkVolumeMountResponse.SerializeToString,
      ),
      'Unmount': grpc.unary_unary_rpc_method_handler(
          servicer.Unmount,
          request_deserializer=api__pb2.SdkVolumeUnmountRequest.FromString,
          response_serializer=api__pb2.SdkVolumeUnmountResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageVolume', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageObjectstoreStub(object):
  """OpenStorageObjectstore is a service used to manage object store services on volumes
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageObjectstore/Inspect',
        request_serializer=api__pb2.SdkObjectstoreInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkObjectstoreInspectResponse.FromString,
        )
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageObjectstore/Create',
        request_serializer=api__pb2.SdkObjectstoreCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkObjectstoreCreateResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageObjectstore/Delete',
        request_serializer=api__pb2.SdkObjectstoreDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkObjectstoreDeleteResponse.FromString,
        )
    self.Update = channel.unary_unary(
        '/openstorage.api.OpenStorageObjectstore/Update',
        request_serializer=api__pb2.SdkObjectstoreUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkObjectstoreUpdateResponse.FromString,
        )


class OpenStorageObjectstoreServicer(object):
  """OpenStorageObjectstore is a service used to manage object store services on volumes
  """

  def Inspect(self, request, context):
    """Inspect returns information about the object store endpoint
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Create(self, request, context):
    """Creates creates an object store endpoint on specified volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete destroys the object store endpoint on the volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    """Updates provided objectstore status.
    This call can be used to stop and start the server while maintaining the same
    object storage id.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageObjectstoreServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkObjectstoreInspectRequest.FromString,
          response_serializer=api__pb2.SdkObjectstoreInspectResponse.SerializeToString,
      ),
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkObjectstoreCreateRequest.FromString,
          response_serializer=api__pb2.SdkObjectstoreCreateResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkObjectstoreDeleteRequest.FromString,
          response_serializer=api__pb2.SdkObjectstoreDeleteResponse.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=api__pb2.SdkObjectstoreUpdateRequest.FromString,
          response_serializer=api__pb2.SdkObjectstoreUpdateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageObjectstore', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageCredentialsStub(object):
  """OpenStorageCredentials is a service used to manage the cloud credentials
  which can then be used by the OpenStorageCloudBackup service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Create',
        request_serializer=api__pb2.SdkCredentialCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialCreateResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Enumerate',
        request_serializer=api__pb2.SdkCredentialEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialEnumerateResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Inspect',
        request_serializer=api__pb2.SdkCredentialInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialInspectResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Delete',
        request_serializer=api__pb2.SdkCredentialDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialDeleteResponse.FromString,
        )
    self.Validate = channel.unary_unary(
        '/openstorage.api.OpenStorageCredentials/Validate',
        request_serializer=api__pb2.SdkCredentialValidateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCredentialValidateResponse.FromString,
        )


class OpenStorageCredentialsServicer(object):
  """OpenStorageCredentials is a service used to manage the cloud credentials
  which can then be used by the OpenStorageCloudBackup service
  """

  def Create(self, request, context):
    """Create is used to submit cloud credentials. It will return an
    id of the credentials once they are verified to work.

    ##### Example
    {% codetabs name="Golang", type="go" -%}
    id, err := client.Create(context.Background(), &api.SdkCredentialCreateRequest{
    CredentialType: &api.SdkCredentialCreateRequest_AwsCredential{
    AwsCredential: &api.SdkAwsCredentialRequest{
    AccessKey: "dummy-access",
    SecretKey: "dummy-secret",
    Endpoint:  "dummy-endpoint",
    Region:    "dummy-region",
    },
    },
    })
    {%- language name="Python", type="py" -%}
    en_resp = client.Create(api_pb2.SdkCredentialCreateRequest(
    aws_credential=api_pb2.SdkAwsCredentialRequest(
    access_key='dummy-access',
    secret_key='dumm-secret',
    endpoint='dummy-endpoint',
    region='dummy-region')))
    {%- endcodetabs %}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns a list of credential ids
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect returns the information about a credential, but does not return the secret key.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete a specified credential
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Validate(self, request, context):
    """Validate is used to validate credentials
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageCredentialsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkCredentialCreateRequest.FromString,
          response_serializer=api__pb2.SdkCredentialCreateResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkCredentialEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkCredentialEnumerateResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkCredentialInspectRequest.FromString,
          response_serializer=api__pb2.SdkCredentialInspectResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkCredentialDeleteRequest.FromString,
          response_serializer=api__pb2.SdkCredentialDeleteResponse.SerializeToString,
      ),
      'Validate': grpc.unary_unary_rpc_method_handler(
          servicer.Validate,
          request_deserializer=api__pb2.SdkCredentialValidateRequest.FromString,
          response_serializer=api__pb2.SdkCredentialValidateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageCredentials', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageSchedulePolicyStub(object):
  """OpenStorageSchedulePolicy service is used to manage the automated
  snapshots for a volume
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Create',
        request_serializer=api__pb2.SdkSchedulePolicyCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyCreateResponse.FromString,
        )
    self.Update = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Update',
        request_serializer=api__pb2.SdkSchedulePolicyUpdateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyUpdateResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Enumerate',
        request_serializer=api__pb2.SdkSchedulePolicyEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyEnumerateResponse.FromString,
        )
    self.Inspect = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Inspect',
        request_serializer=api__pb2.SdkSchedulePolicyInspectRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyInspectResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageSchedulePolicy/Delete',
        request_serializer=api__pb2.SdkSchedulePolicyDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkSchedulePolicyDeleteResponse.FromString,
        )


class OpenStorageSchedulePolicyServicer(object):
  """OpenStorageSchedulePolicy service is used to manage the automated
  snapshots for a volume
  """

  def Create(self, request, context):
    """Create creates a new snapshot schedule. They can be setup daily,
    weekly, or monthly.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    """Update a snapshot schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Enumerate returns a list of schedules
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inspect(self, request, context):
    """Inspect returns information about a specified schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Delete removes a snapshot schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageSchedulePolicyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkSchedulePolicyCreateRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyCreateResponse.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=api__pb2.SdkSchedulePolicyUpdateRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyUpdateResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkSchedulePolicyEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyEnumerateResponse.SerializeToString,
      ),
      'Inspect': grpc.unary_unary_rpc_method_handler(
          servicer.Inspect,
          request_deserializer=api__pb2.SdkSchedulePolicyInspectRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyInspectResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkSchedulePolicyDeleteRequest.FromString,
          response_serializer=api__pb2.SdkSchedulePolicyDeleteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageSchedulePolicy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class OpenStorageCloudBackupStub(object):
  """OpenStorageCloudBackup service manages backing up volumes to a cloud
  location like Amazon, Google, or Azure.

  #### Backup
  To create a backup, you must first call the Create() call for a specified
  volume. To see the status of this request, use Status() which returns
  a map where the keys are the source volume id.

  #### Restore
  To restore, you would pass a `backup_id` of a successful backup.
  `backup_id` can be retreived by calling Enumerate() for a specified volume.
  Pass this `backup_id` and a new volume name to Restore() to start
  restoring a new volume from an existing backup. To see the status of this
  restore, pass volume id returned by Restore() to input to Status()

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Create',
        request_serializer=api__pb2.SdkCloudBackupCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupCreateResponse.FromString,
        )
    self.Restore = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Restore',
        request_serializer=api__pb2.SdkCloudBackupRestoreRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupRestoreResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Delete',
        request_serializer=api__pb2.SdkCloudBackupDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupDeleteResponse.FromString,
        )
    self.DeleteAll = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/DeleteAll',
        request_serializer=api__pb2.SdkCloudBackupDeleteAllRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupDeleteAllResponse.FromString,
        )
    self.Enumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Enumerate',
        request_serializer=api__pb2.SdkCloudBackupEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupEnumerateResponse.FromString,
        )
    self.Status = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Status',
        request_serializer=api__pb2.SdkCloudBackupStatusRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupStatusResponse.FromString,
        )
    self.Catalog = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/Catalog',
        request_serializer=api__pb2.SdkCloudBackupCatalogRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupCatalogResponse.FromString,
        )
    self.History = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/History',
        request_serializer=api__pb2.SdkCloudBackupHistoryRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupHistoryResponse.FromString,
        )
    self.StateChange = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/StateChange',
        request_serializer=api__pb2.SdkCloudBackupStateChangeRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupStateChangeResponse.FromString,
        )
    self.SchedCreate = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/SchedCreate',
        request_serializer=api__pb2.SdkCloudBackupSchedCreateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupSchedCreateResponse.FromString,
        )
    self.SchedDelete = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/SchedDelete',
        request_serializer=api__pb2.SdkCloudBackupSchedDeleteRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupSchedDeleteResponse.FromString,
        )
    self.SchedEnumerate = channel.unary_unary(
        '/openstorage.api.OpenStorageCloudBackup/SchedEnumerate',
        request_serializer=api__pb2.SdkCloudBackupSchedEnumerateRequest.SerializeToString,
        response_deserializer=api__pb2.SdkCloudBackupSchedEnumerateResponse.FromString,
        )


class OpenStorageCloudBackupServicer(object):
  """OpenStorageCloudBackup service manages backing up volumes to a cloud
  location like Amazon, Google, or Azure.

  #### Backup
  To create a backup, you must first call the Create() call for a specified
  volume. To see the status of this request, use Status() which returns
  a map where the keys are the source volume id.

  #### Restore
  To restore, you would pass a `backup_id` of a successful backup.
  `backup_id` can be retreived by calling Enumerate() for a specified volume.
  Pass this `backup_id` and a new volume name to Restore() to start
  restoring a new volume from an existing backup. To see the status of this
  restore, pass volume id returned by Restore() to input to Status()

  """

  def Create(self, request, context):
    """Creates a backup request for a specified volume. Use
    OpenStorageCloudBackup.Status() to get the current status of the
    backup request.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Restore(self, request, context):
    """Restore creates a new volume from a backup id. The newly created volume
    has an ha_level (number of replicas) of only 1. To increase the number of
    replicas, use OpenStorageVolume.Set() to change the ha_level.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Deletes a backup stored in the cloud. If the backup is an incremental
    backup and other backups are dependent on it, it will not be able to be deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteAll(self, request, context):
    """DeleteAll deletes all the backups in the cloud for the specified volume.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Enumerate(self, request, context):
    """Return a list of backups for the specified volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Status(self, request, context):
    """Status returns the status of any cloud backups of a volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Catalog(self, request, context):
    """Catalog returns a list of the contents in the backup
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def History(self, request, context):
    """History returns a list of backups for a specified volume
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StateChange(self, request, context):
    """StateChange can be used to stop, pause, and restart a backup
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SchedCreate(self, request, context):
    """Create cloud backup schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SchedDelete(self, request, context):
    """Delete cloud backup schedule
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SchedEnumerate(self, request, context):
    """Enumerate cloud backup schedules
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenStorageCloudBackupServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=api__pb2.SdkCloudBackupCreateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupCreateResponse.SerializeToString,
      ),
      'Restore': grpc.unary_unary_rpc_method_handler(
          servicer.Restore,
          request_deserializer=api__pb2.SdkCloudBackupRestoreRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupRestoreResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=api__pb2.SdkCloudBackupDeleteRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupDeleteResponse.SerializeToString,
      ),
      'DeleteAll': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteAll,
          request_deserializer=api__pb2.SdkCloudBackupDeleteAllRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupDeleteAllResponse.SerializeToString,
      ),
      'Enumerate': grpc.unary_unary_rpc_method_handler(
          servicer.Enumerate,
          request_deserializer=api__pb2.SdkCloudBackupEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupEnumerateResponse.SerializeToString,
      ),
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=api__pb2.SdkCloudBackupStatusRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupStatusResponse.SerializeToString,
      ),
      'Catalog': grpc.unary_unary_rpc_method_handler(
          servicer.Catalog,
          request_deserializer=api__pb2.SdkCloudBackupCatalogRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupCatalogResponse.SerializeToString,
      ),
      'History': grpc.unary_unary_rpc_method_handler(
          servicer.History,
          request_deserializer=api__pb2.SdkCloudBackupHistoryRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupHistoryResponse.SerializeToString,
      ),
      'StateChange': grpc.unary_unary_rpc_method_handler(
          servicer.StateChange,
          request_deserializer=api__pb2.SdkCloudBackupStateChangeRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupStateChangeResponse.SerializeToString,
      ),
      'SchedCreate': grpc.unary_unary_rpc_method_handler(
          servicer.SchedCreate,
          request_deserializer=api__pb2.SdkCloudBackupSchedCreateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupSchedCreateResponse.SerializeToString,
      ),
      'SchedDelete': grpc.unary_unary_rpc_method_handler(
          servicer.SchedDelete,
          request_deserializer=api__pb2.SdkCloudBackupSchedDeleteRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupSchedDeleteResponse.SerializeToString,
      ),
      'SchedEnumerate': grpc.unary_unary_rpc_method_handler(
          servicer.SchedEnumerate,
          request_deserializer=api__pb2.SdkCloudBackupSchedEnumerateRequest.FromString,
          response_serializer=api__pb2.SdkCloudBackupSchedEnumerateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openstorage.api.OpenStorageCloudBackup', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
